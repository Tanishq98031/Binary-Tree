class Solution
{
    public ArrayList <Integer> bottomView(Node root)
    {
        ArrayList<Integer> list = new ArrayList<>();
        if(root == null)
        {
            return list;
        }
        
        Queue<Pair> q = new LinkedList<>();
        Map<Integer, Integer> map = new TreeMap<>();
        
        q.offer(new Pair(root, 0));
        
        while(!q.isEmpty())
        {
            Pair pair = q.poll();
            int hd = pair.distance;
            Node x = pair.n;
            
            map.put(hd, x.data);
            
            if(x.left != null)
            {
                q.offer(new Pair(x.left, hd - 1));
            }
            if(x.right != null)
            {
                q.offer(new Pair(x.right, hd + 1));
            }
        }
        
        for(Map.Entry<Integer, Integer> entry: map.entrySet())
        {
            list.add(entry.getValue());
        }
        return list;
    }
}

class Pair
{
    int distance;
    Node n;
    
    Pair(Node n, int d)
    {
        this.n = n;
        this.distance = d;
    }
}
