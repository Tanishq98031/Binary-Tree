class Solution
{
    static ArrayList<Integer> topView(Node root)
    {
        ArrayList<Integer> ans = new ArrayList<>();
        if(root == null)
        {
            return ans;
        }
        Queue<Pair> q = new LinkedList<>();
        Map<Integer, Integer> map = new TreeMap<>();
        
        q.offer(new Pair(root, 0));
        
        while(!q.isEmpty())
        {
            Pair p = q.poll();
            Node temp = p.node;
            int hd = p.distance;
            
            if(!map.containsKey(hd))
            {
                map.put(hd, temp.data);
            }
            if(temp.left != null)
            {
                q.offer(new Pair(temp.left, hd-1));
            }
            if(temp.right != null)
            {
                q.offer(new Pair(temp.right, hd + 1));
            }
        }
        
        for(Map.Entry<Integer, Integer> entry: map.entrySet())
        {
            ans.add(entry.getValue());
        }
        return ans;
    }
}

class Pair
{
    int distance;
    Node node;
    
    Pair(Node node, int distance)
    {
        this.node = node;
        this.distance = distance;
    }
}
